name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            executable: svg-mcp.exe
          - name: windows-x64-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            executable: svg-mcp.exe
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            executable: svg-mcp
          - name: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            executable: svg-mcp
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            executable: svg-mcp

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
          ${{ runner.os }}-cargo-

    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config

    - name: Build
      run: cargo build --release --target ${{ matrix.platform.target }}

    - name: Test (current platform only)
      if: matrix.platform.target == 'x86_64-pc-windows-msvc' || matrix.platform.target == 'x86_64-unknown-linux-gnu' || matrix.platform.target == 'x86_64-apple-darwin'
      run: cargo test --target ${{ matrix.platform.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts/${{ matrix.platform.name }}

    - name: Copy executable (Unix)
      if: matrix.platform.os != 'windows-latest'
      run: |
        cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.executable }} artifacts/${{ matrix.platform.name }}/
        chmod +x artifacts/${{ matrix.platform.name }}/${{ matrix.platform.executable }}

    - name: Copy executable (Windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        Copy-Item "target/${{ matrix.platform.target }}/release/${{ matrix.platform.executable }}" "artifacts/${{ matrix.platform.name }}/"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: svg-mcp-${{ matrix.platform.name }}
        path: artifacts/${{ matrix.platform.name }}/${{ matrix.platform.executable }}
        if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Get release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      
    - name: Create tag (if workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ inputs.version }}';
          const sha = context.sha;
          
          try {
            // Create the tag
            await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
              message: `Release ${tag}`,
              object: sha,
              type: 'commit'
            });
            
            // Create the reference
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tag}`,
              sha: sha
            });
            
            console.log(`Tag ${tag} created successfully`);
          } catch (error) {
            console.log(`Tag ${tag} might already exist: ${error.message}`);
          }
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        
    - name: Create release archives
      run: |
        cd dist
        for dir in svg-mcp-*; do
          platform=${dir#svg-mcp-}
          cd "$dir"
          if [[ "$platform" == *"windows"* ]]; then
            zip -r "../svg-mcp-$platform.zip" *
          else
            tar -czf "../svg-mcp-$platform.tar.gz" *
          fi
          cd ..
        done
        ls -la *.{zip,tar.gz} 2>/dev/null || true
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.version }}
        files: |
          dist/*.zip
          dist/*.tar.gz
        body: |
          ## SVG MCP Server Release ${{ steps.version.outputs.version }}
          
          Cross-platform binaries for the SVG MCP Server.
          
          ### Downloads
          
          - **Windows x64 (MSVC)**: `svg-mcp-windows-x64.zip`
          - **Windows x64 (GNU)**: `svg-mcp-windows-x64-gnu.zip`
          - **Linux x64**: `svg-mcp-linux-x64.tar.gz`
          - **macOS x64 (Intel)**: `svg-mcp-macos-x64.tar.gz`
          - **macOS ARM64 (Apple Silicon)**: `svg-mcp-macos-arm64.tar.gz`
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Place the executable in your desired location
          4. Configure Claude Desktop to use the binary
          
          ### Usage
          
          See the [README](https://github.com/${{ github.repository }}) for configuration instructions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-platform-packages:
    name: Publish Platform Packages
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Get release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # 移除v前缀
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Wait for GitHub release
      run: |
        echo "Waiting for GitHub release to be available..."
        sleep 30
        
        # 验证release是否可用
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.version }}"
        for i in {1..10}; do
          if curl -s "$RELEASE_URL" | grep -q '"tag_name"'; then
            echo "Release is available!"
            break
          fi
          echo "Waiting for release... (attempt $i/10)"
          sleep 10
        done
        
    - name: Download and prepare platform packages
      run: |
        RELEASE_TAG="v${{ steps.version.outputs.version }}"
        BASE_URL="https://github.com/${{ github.repository }}/releases/download/$RELEASE_TAG"
        
        echo "Downloading binaries for platform packages..."
        
        # Windows x64 MSVC
        echo "Downloading Windows x64..."
        curl -L "$BASE_URL/svg-mcp-windows-x64.zip" -o windows-x64.zip
        mkdir -p temp/windows-x64
        cd temp/windows-x64
        unzip ../../windows-x64.zip
        cd ../..
        mkdir -p packages/win32-x64/bin
        mv temp/windows-x64/svg-mcp.exe packages/win32-x64/bin/
        rm -rf temp/windows-x64 windows-x64.zip
        
        # Linux x64
        echo "Downloading Linux x64..."
        curl -L "$BASE_URL/svg-mcp-linux-x64.tar.gz" -o linux-x64.tar.gz
        mkdir -p temp/linux-x64
        cd temp/linux-x64
        tar -xzf ../../linux-x64.tar.gz
        cd ../..
        mkdir -p packages/linux-x64/bin
        mv temp/linux-x64/svg-mcp packages/linux-x64/bin/
        chmod +x packages/linux-x64/bin/svg-mcp
        rm -rf temp/linux-x64 linux-x64.tar.gz
        
        # macOS x64
        echo "Downloading macOS x64..."
        curl -L "$BASE_URL/svg-mcp-macos-x64.tar.gz" -o macos-x64.tar.gz
        mkdir -p temp/macos-x64
        cd temp/macos-x64
        tar -xzf ../../macos-x64.tar.gz
        cd ../..
        mkdir -p packages/macos-x64/bin
        mv temp/macos-x64/svg-mcp packages/macos-x64/bin/
        chmod +x packages/macos-x64/bin/svg-mcp
        rm -rf temp/macos-x64 macos-x64.tar.gz
        
        # macOS ARM64
        echo "Downloading macOS ARM64..."
        curl -L "$BASE_URL/svg-mcp-macos-arm64.tar.gz" -o macos-arm64.tar.gz
        mkdir -p temp/macos-arm64
        cd temp/macos-arm64
        tar -xzf ../../macos-arm64.tar.gz
        cd ../..
        mkdir -p packages/macos-arm64/bin
        mv temp/macos-arm64/svg-mcp packages/macos-arm64/bin/
        chmod +x packages/macos-arm64/bin/svg-mcp
        rm -rf temp/macos-arm64 macos-arm64.tar.gz
        
        # 验证所有必要的文件都存在
        echo "Verifying platform packages..."
        for pkg_dir in packages/*/; do
          if [ -d "$pkg_dir" ]; then
            pkg_name=$(basename "$pkg_dir")
            echo "Checking $pkg_name package..."
            
            # 检查是否有package.json，如果没有则跳过这个包
            if [ ! -f "$pkg_dir/package.json" ]; then
              echo "⚠️ No package.json found in $pkg_dir, skipping..."
              continue
            fi
            
            # 检查是否有index.js
            if [ ! -f "$pkg_dir/index.js" ]; then
              echo "⚠️ No index.js found in $pkg_dir, skipping..."
              continue
            fi
            
            # 显示文件内容以便调试
            echo "📄 Contents of $pkg_dir/package.json:"
            cat "$pkg_dir/package.json"
            echo ""
            
            # 检查JSON格式是否正确
            if ! node -e "JSON.parse(require('fs').readFileSync('$pkg_dir/package.json', 'utf8'))" 2>/dev/null; then
              echo "❌ Invalid JSON in $pkg_dir/package.json"
              echo "📄 Raw file content (with special characters visible):"
              cat -A "$pkg_dir/package.json" || od -c "$pkg_dir/package.json"
              echo ""
              echo "📏 File size: $(wc -c < "$pkg_dir/package.json") bytes"
              echo "📏 File lines: $(wc -l < "$pkg_dir/package.json") lines"
              continue
            fi
            
            echo "✅ $pkg_name package is ready"
          fi
        done
        
        # 显示下载的文件
        echo "Platform packages prepared:"
        find packages -name "*" -type f | sort
        
    - name: Update platform package versions
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "Updating platform package versions to $VERSION..."
        
        # 更新每个有效平台包的版本号
        for pkg_dir in packages/*/; do
          if [ -d "$pkg_dir" ]; then
            pkg_name=$(basename "$pkg_dir")
            
            # 检查是否有package.json，如果没有则跳过
            if [ ! -f "$pkg_dir/package.json" ]; then
              echo "⚠️ Skipping $pkg_name: no package.json found"
              continue
            fi
            
            echo "📄 Before update - Contents of $pkg_dir/package.json:"
            cat "$pkg_dir/package.json"
            echo ""
            
            # 检查JSON格式是否正确，如果不正确则显示详细信息
            if ! node -e "JSON.parse(require('fs').readFileSync('$pkg_dir/package.json', 'utf8'))" 2>/dev/null; then
              echo "⚠️ Skipping $pkg_name: invalid JSON in package.json"
              echo "📄 Raw file content (with special characters visible):"
              cat -A "$pkg_dir/package.json" || od -c "$pkg_dir/package.json"
              echo ""
              echo "📏 File size: $(wc -c < "$pkg_dir/package.json") bytes"
              echo "📏 File lines: $(wc -l < "$pkg_dir/package.json") lines"
              continue
            fi
            
            echo "Updating version in $pkg_dir/package.json to $VERSION"
            
            # 使用node来安全地更新JSON文件
            node -e "
              const fs = require('fs');
              const path = require('path');
              try {
                const pkgPath = path.join('$pkg_dir', 'package.json');
                const content = fs.readFileSync(pkgPath, 'utf8');
                if (!content.trim()) {
                  console.log('⚠️ Empty package.json file, skipping...');
                  process.exit(0);
                }
                const pkg = JSON.parse(content);
                pkg.version = '$VERSION';
                fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
                console.log('Updated', pkg.name, 'to version', pkg.version);
              } catch (error) {
                console.log('❌ Error updating package.json:', error.message);
                process.exit(0); // 继续处理其他包，不要让整个流程失败
              }
            "
            
            echo "📄 After update - Contents of $pkg_dir/package.json:"
            cat "$pkg_dir/package.json"
            echo ""
            
            # 再次验证JSON格式是否正确
            if node -e "JSON.parse(require('fs').readFileSync('$pkg_dir/package.json', 'utf8'))" 2>/dev/null; then
              echo "✅ Valid JSON in $pkg_dir/package.json"
            else
              echo "❌ Invalid JSON in $pkg_dir/package.json after update"
              echo "📄 Raw file content after update:"
              cat -A "$pkg_dir/package.json" || od -c "$pkg_dir/package.json"
            fi
            echo "---"
          fi
        done
        
        echo "Platform package version update completed."
        
    - name: Publish platform packages
      run: |
        echo "Publishing platform-specific packages..."
        
        successful_packages=()
        failed_packages=()
        
        for pkg_dir in packages/*/; do
          if [ -d "$pkg_dir" ]; then
            pkg_name=$(basename "$pkg_dir")
            echo "=== Processing $pkg_name package ==="
            
            # 检查是否有package.json
            if [ ! -f "$pkg_dir/package.json" ]; then
              echo "⚠️ Skipping $pkg_name: no package.json found"
              failed_packages+=("$pkg_name (no package.json)")
              continue
            fi
            
            echo "📄 Contents of $pkg_dir/package.json:"
            cat "$pkg_dir/package.json"
            echo ""
            
            # 检查JSON格式
            if ! node -e "JSON.parse(require('fs').readFileSync('$pkg_dir/package.json', 'utf8'))" 2>/dev/null; then
              echo "⚠️ Skipping $pkg_name: invalid JSON in package.json"
              echo "📄 Raw file content (with special characters visible):"
              cat -A "$pkg_dir/package.json" || od -c "$pkg_dir/package.json"
              echo ""
              echo "📏 File size: $(wc -c < "$pkg_dir/package.json") bytes"
              failed_packages+=("$pkg_name (invalid JSON)")
              continue
            fi
            
            # 检查是否有index.js
            if [ ! -f "$pkg_dir/index.js" ]; then
              echo "⚠️ Skipping $pkg_name: no index.js found"
              failed_packages+=("$pkg_name (no index.js)")
              continue
            fi
            
            # 检查是否有二进制文件
            if [ ! -f "$pkg_dir/bin/svg-mcp"* ]; then
              echo "⚠️ Skipping $pkg_name: no binary found in bin/"
              failed_packages+=("$pkg_name (no binary)")
              continue
            fi
            
            # 获取包名用于显示
            package_name=$(node -e "console.log(JSON.parse(require('fs').readFileSync('$pkg_dir/package.json', 'utf8')).name)")
            echo "Publishing $package_name..."
            
            cd "$pkg_dir"
            if npm publish --access public; then
              echo "✅ Published $package_name"
              successful_packages+=("$package_name")
            else
              echo "❌ Failed to publish $package_name"
              failed_packages+=("$package_name (publish failed)")
            fi
            cd ../..
            echo ""
          fi
        done
        
        # 显示发布结果
        echo ""
        echo "=== PUBLISH RESULTS ==="
        echo "✅ Successfully published packages:"
        for pkg in "${successful_packages[@]}"; do
          echo "  - $pkg"
        done
        
        if [ ${#failed_packages[@]} -gt 0 ]; then
          echo ""
          echo "❌ Failed/skipped packages:"
          for pkg in "${failed_packages[@]}"; do
            echo "  - $pkg"
          done
        fi
        
        # 如果没有成功发布任何包，则失败
        if [ ${#successful_packages[@]} -eq 0 ]; then
          echo ""
          echo "❌ No packages were successfully published!"
          exit 1
        else
          echo ""
          echo "🎉 Published ${#successful_packages[@]} packages successfully!"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-main-package:
    name: Publish Main Package
    runs-on: ubuntu-latest
    needs: publish-platform-packages
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Get release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # 移除v前缀
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Update main package version and dependencies
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # 使用更安全的方法更新主包版本和依赖
        node -e "
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          pkg.version = '$VERSION';
          
          // 更新 optionalDependencies 中的平台包版本
          if (pkg.optionalDependencies) {
            Object.keys(pkg.optionalDependencies).forEach(dep => {
              if (dep.startsWith('@svg-mcp/')) {
                pkg.optionalDependencies[dep] = '$VERSION';
              }
            });
          }
          
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log('Updated main package to version', pkg.version);
          console.log('Updated optional dependencies:', pkg.optionalDependencies);
        "
        
        # 验证JSON格式
        if ! node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"; then
          echo "❌ Invalid JSON in package.json"
          cat package.json
          exit 1
        else
          echo "✅ Valid JSON in package.json"
        fi
        
        echo "Updated package.json:"
        cat package.json
        
    - name: Wait for platform packages to be available
      run: |
        echo "Waiting for platform packages to be available on npm..."
        VERSION="${{ steps.version.outputs.version }}"
        
        packages=("@svg-mcp/win32-x64" "@svg-mcp/linux-x64" "@svg-mcp/darwin-x64" "@svg-mcp/darwin-arm64")
        
        for package in "${packages[@]}"; do
          echo "Checking $package@$VERSION..."
          for i in {1..30}; do
            if npm view "$package@$VERSION" version &>/dev/null; then
              echo "✅ $package@$VERSION is available"
              break
            fi
            echo "Waiting for $package@$VERSION... (attempt $i/30)"
            sleep 10
          done
        done
        
    - name: Publish main package
      run: |
        echo "Publishing main @svg-mcp/svg-mcp package..."
        npm publish
        echo "✅ Published @svg-mcp/svg-mcp@${{ steps.version.outputs.version }}"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
