name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            executable: svg-mcp.exe
          - name: windows-x64-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            executable: svg-mcp.exe
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            executable: svg-mcp
          - name: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            executable: svg-mcp
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            executable: svg-mcp

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
          ${{ runner.os }}-cargo-

    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config

    - name: Build
      run: cargo build --release --target ${{ matrix.platform.target }}

    - name: Test (current platform only)
      if: matrix.platform.target == 'x86_64-pc-windows-msvc' || matrix.platform.target == 'x86_64-unknown-linux-gnu' || matrix.platform.target == 'x86_64-apple-darwin'
      run: cargo test --target ${{ matrix.platform.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts/${{ matrix.platform.name }}

    - name: Copy executable (Unix)
      if: matrix.platform.os != 'windows-latest'
      run: |
        cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.executable }} artifacts/${{ matrix.platform.name }}/
        chmod +x artifacts/${{ matrix.platform.name }}/${{ matrix.platform.executable }}

    - name: Copy executable (Windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        Copy-Item "target/${{ matrix.platform.target }}/release/${{ matrix.platform.executable }}" "artifacts/${{ matrix.platform.name }}/"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: svg-mcp-${{ matrix.platform.name }}
        path: artifacts/${{ matrix.platform.name }}/${{ matrix.platform.executable }}
        if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get release version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
      
    - name: Create tag (if workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ inputs.version }}
        git push origin ${{ inputs.version }}
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist
        
    - name: Create release archives
      run: |
        cd dist
        for dir in svg-mcp-*; do
          platform=${dir#svg-mcp-}
          cd "$dir"
          if [[ "$platform" == *"windows"* ]]; then
            zip -r "../svg-mcp-$platform.zip" *
          else
            tar -czf "../svg-mcp-$platform.tar.gz" *
          fi
          cd ..
        done
        ls -la *.{zip,tar.gz} 2>/dev/null || true
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.version }}
        files: |
          dist/*.zip
          dist/*.tar.gz
        body: |
          ## SVG MCP Server Release ${{ steps.version.outputs.version }}
          
          Cross-platform binaries for the SVG MCP Server.
          
          ### Downloads
          
          - **Windows x64 (MSVC)**: `svg-mcp-windows-x64.zip`
          - **Windows x64 (GNU)**: `svg-mcp-windows-x64-gnu.zip`
          - **Linux x64**: `svg-mcp-linux-x64.tar.gz`
          - **macOS x64 (Intel)**: `svg-mcp-macos-x64.tar.gz`
          - **macOS ARM64 (Apple Silicon)**: `svg-mcp-macos-arm64.tar.gz`
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Place the executable in your desired location
          4. Configure Claude Desktop to use the binary
          
          ### Usage
          
          See the [README](https://github.com/${{ github.repository }}) for configuration instructions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
